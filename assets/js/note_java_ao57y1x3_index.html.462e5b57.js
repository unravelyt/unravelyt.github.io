"use strict";(self.webpackChunkunravely_blog=self.webpackChunkunravely_blog||[]).push([[2550],{1298:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>t,data:()=>l});var n=a(6254);const e={},t=(0,a(1021).A)(e,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<table><thead><tr><th>符号</th><th>描述</th><th>运算规则</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>两个位都为1时，结果才为1</td></tr><tr><td>|</td><td>或</td><td>两个位都为0时，结果才为0</td></tr><tr><td>^</td><td>异或</td><td>两个位相同为0，相异为1</td></tr><tr><td>~</td><td>取反</td><td>0变1，1变0</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>各二进位全部左移若干位，高位丢弃，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）</td></tr></tbody></table><br><p>|=：两个二进制对应位都为0时，结果等于0，否则结果等于1；</p><p>&amp;=：两个二进制的对应位都为1时，结果为1，否则结果等于0；</p><p>^=：两个二进制的对应位相同，结果为0，否则结果为1。</p><h2 id="位或运算符" tabindex="-1"><a class="header-anchor" href="#位或运算符"><span>|= 位或运算符</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>|= 运算符和 += 这一类的运算符一样，拆解开就是 a = a | b；</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运算规则：两个数都转为二进制，然后从高位开始比较，两个数只要有一个为1则为1，否则就为0。</p><p>比如：129|128.</p><p>129转换成二进制就是10000001，128转换成二进制就是10000000。从高位开始比较得到，得到10000001，即129.</p><h2 id="位与运算符" tabindex="-1"><a class="header-anchor" href="#位与运算符"><span>&amp;= 位与运算符</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&amp;= 运算符和 += 这一类的运算符一样，拆解开就是 a = a &amp; b；</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运算规则：两个数都转为二进制，然后从高位开始比较，如果两个数都为1则为1，否则为0。</p><p>比如：129&amp;128.</p><p>129转换成二进制就是10000001，128转换成二进制就是10000000。从高位开始比较得到，得到10000000，即128.</p><h2 id="位异或运算" tabindex="-1"><a class="header-anchor" href="#位异或运算"><span>^= 位异或运算</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>^= 运算符和 += 这一类的运算符一样，拆解开就是 a = a^b；</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运算规则是：两个数转为二进制，然后从高位开始比较，如果相同则为0，不相同则为1。</p><p>比如：8^11.</p><p>8转为二进制是1000，11转为二进制是1011.从高位开始比较得到的是：0011.然后二进制转为十进制，就是<code>Integer.parseInt(“0011”,2)=3</code>; 也就是说对同一个字符进行两次异或运算就会回到原来的值。</p><h2 id="位非运算符" tabindex="-1"><a class="header-anchor" href="#位非运算符"><span>~= 位非运算符</span></a></h2><p>运算规则：如果位为0，结果是1，如果位为1，结果是0.</p><p>比如：~37</p><p>在Java中，所有数据的表示方法都是以补码的形式表示，如果没有特殊说明，Java中的数据类型默认是int,int数据类型的长度是8位，一位是四个字节，就是32字节，32bit.</p><p>8转为二进制是100101.</p><p>补码后为： 00000000 00000000 00000000 00100101</p><p>取反为： 11111111 11111111 11111111 11011010</p><p>因为高位是1，所以原码为负数，负数的补码是其绝对值的原码取反，末尾再加1。</p><p>因此，我们可将这个二进制数的补码进行还原： 首先，末尾减1得反码：11111111 11111111 11111111 11011001 其次，将各位取反得原码：</p><p>00000000 00000000 00000000 00100110，此时二进制转原码为38</p><p>所以~37 = -38.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[])</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 0000 0101</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 0000 0011</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        a1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">|=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 0000 00111</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">|= </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 0000 0101</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 0000 0011</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        a2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&amp;=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 0000 0001</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&amp;= </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 0000 0101</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 0000 0011</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        a3 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">^</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 0000 0110</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">^= </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="左移-运算" tabindex="-1"><a class="header-anchor" href="#左移-运算"><span>左移&lt;&lt;运算</span></a></h2><p>将二进制数向左移位操作，高位溢出则丢弃，低位补0</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>a=11;</span></span>\n<span class="line"><span>a&lt;&lt;1;</span></span>\n<span class="line"><span>移位前：0000 1011</span></span>\n<span class="line"><span>移位后：0001 0110（十进制值为22）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上述样例我们可以发现，<strong>对一个数左移1位就是乘以2，左移n位就是乘以2的n次方（而左移运算比乘法快得多）</strong></p><h2 id="右移-运算" tabindex="-1"><a class="header-anchor" href="#右移-运算"><span>右移&gt;&gt;运算</span></a></h2><p>右移位运算中，无符号数和有符号数的运算并不相同。对于无符号数，右移之后高位补0；对于有符号数，符号位一起移动，正数高位补0，负数高位补1</p><p>实际上，<strong>右移n位就是除以2的n次方，当得到的商不是整数时会往小取整</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>b=5;</span></span>\n<span class="line"><span>b&lt;&lt;2;</span></span>\n<span class="line"><span>移位前：0000 0101</span></span>\n<span class="line"><span>移位后：0001 0100（十进制值为20）</span></span>\n<span class="line"><span>无符号数</span></span>\n<span class="line"><span>a=16;</span></span>\n<span class="line"><span>a&gt;&gt;3;</span></span>\n<span class="line"><span>移位前：0001 0000</span></span>\n<span class="line"><span>移位后：0000 0010（十进制值为2）</span></span>\n<span class="line"><span>有符号数（正数）</span></span>\n<span class="line"><span>b=32;</span></span>\n<span class="line"><span>a&gt;&gt;3;</span></span>\n<span class="line"><span>移位前：0010 0000</span></span>\n<span class="line"><span>移位后：0000 0100（十进制值位4）</span></span>\n<span class="line"><span>有符号数（负数）</span></span>\n<span class="line"><span>b=-32;</span></span>\n<span class="line"><span>b&gt;&gt;3;</span></span>\n<span class="line"><span>移位前：1010 0000</span></span>\n<span class="line"><span>移位后：1000 0100（十进制值为-4）</span></span>\n<span class="line"><span>c=25;</span></span>\n<span class="line"><span>c&gt;&gt;4;</span></span>\n<span class="line"><span>移位前：0001 1001</span></span>\n<span class="line"><span>移位后：0000 0001（十进制值为1）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',40)]))}]]),l=JSON.parse('{"path":"/note_java/ao57y1x3/","title":"Java移位运算,运算符","lang":"zh-CN","frontmatter":{"title":"Java移位运算,运算符","createTime":"2024/11/08 11:41:33","permalink":"/note_java/ao57y1x3/","description":"|=：两个二进制对应位都为0时，结果等于0，否则结果等于1； &=：两个二进制的对应位都为1时，结果为1，否则结果等于0； ^=：两个二进制的对应位相同，结果为0，否则结果为1。 |= 位或运算符 运算规则：两个数都转为二进制，然后从高位开始比较，两个数只要有一个为1则为1，否则就为0。 比如：129|128. 129转换成二进制就是10000001，...","head":[["meta",{"property":"og:url","content":"https://www.unravely.press/note_java/ao57y1x3/"}],["meta",{"property":"og:site_name","content":"Unravely"}],["meta",{"property":"og:title","content":"Java移位运算,运算符"}],["meta",{"property":"og:description","content":"|=：两个二进制对应位都为0时，结果等于0，否则结果等于1； &=：两个二进制的对应位都为1时，结果为1，否则结果等于0； ^=：两个二进制的对应位相同，结果为0，否则结果为1。 |= 位或运算符 运算规则：两个数都转为二进制，然后从高位开始比较，两个数只要有一个为1则为1，否则就为0。 比如：129|128. 129转换成二进制就是10000001，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-13T10:25:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-13T10:25:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java移位运算,运算符\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-13T10:25:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"|= 位或运算符","slug":"位或运算符","link":"#位或运算符","children":[]},{"level":2,"title":"&= 位与运算符","slug":"位与运算符","link":"#位与运算符","children":[]},{"level":2,"title":"^= 位异或运算","slug":"位异或运算","link":"#位异或运算","children":[]},{"level":2,"title":"~= 位非运算符","slug":"位非运算符","link":"#位非运算符","children":[]},{"level":2,"title":"左移<<运算","slug":"左移-运算","link":"#左移-运算","children":[]},{"level":2,"title":"右移>>运算","slug":"右移-运算","link":"#右移-运算","children":[]}],"readingTime":{"minutes":3.82,"words":1147},"git":{"createdTime":1731061423000,"updatedTime":1731493537000,"contributors":[{"name":"banxia","email":"yutong9717@163.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/note_java/10.Java_/Java移位运算.md","bulletin":false}')}}]);