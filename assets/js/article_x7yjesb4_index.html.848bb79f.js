"use strict";(self.webpackChunkunravely_blog=self.webpackChunkunravely_blog||[]).push([[7272],{4198:(t,s,i)=>{i.r(s),i.d(s,{comp:()=>e,data:()=>n});var d=i(6254);const a={},e=(0,i(1021).A)(a,[["render",function(t,s){return(0,d.uX)(),(0,d.CE)("div",null,[s[2]||(s[2]=(0,d.Fv)('<h2 id="_0-通用命名规则" tabindex="-1"><a class="header-anchor" href="#_0-通用命名规则"><span>0. 通用命名规则</span></a></h2><ol><li>尽量不要使用拼音；<strong>杜绝拼音和英文混用</strong>。对于一些通用的表示或者难以用英文描述的可以采用拼音，一旦采用拼音就坚决不能和英文混用。正例：BeiJing， HangZhou 反例：validateCanShu</li><li>命名过程中尽量不要出现特殊的字符，常量除外。</li><li>尽量不要和jdk或者框架中已存在的类重名，也不能使用java中的关键字命名。</li><li>妙用介词，如for(可以用同音的4代替), to(可用同音的2代替), from, with，of等。如类名采用User4RedisDO，方法名getUserInfoFromRedis，convertJson2Map等。</li></ol><p><strong>Java中常用到的命名形式共有三种：</strong></p><ul><li>首字母大写的UpperCamelCase</li><li>首字母小写的lowerCamelCase</li><li>全部大写的并用下划线分割单词的UPPERCAMELUNSER_SCORE。</li></ul><p>通常约定，<strong>类一般采用大驼峰命名，方法和局部变量使用小驼峰命名，而大写下划线命名通常是常量和枚举中使用。</strong></p><table><thead><tr><th>类型(名)</th><th>约束</th><th>例</th></tr></thead><tbody><tr><td>项目</td><td>全部小写多个单词用中划线分隔‘-’</td><td>spring-cloud</td></tr><tr><td>包</td><td>全部小写</td><td>com.alibaba.fastjson</td></tr><tr><td>类</td><td>单词首字母大写</td><td>Feature,FieldDeserializer</td></tr><tr><td>变量</td><td>首字母小写多个单词组成时，除首个单词其他单词首字母都要大写</td><td>password, userName</td></tr><tr><td>常量</td><td>全部大写，多个单词，用&#39;_&#39;分隔</td><td>CACHEEXPIREDTIME</td></tr><tr><td>方法</td><td>同变量</td><td>read(), getById(Long id)</td></tr></tbody></table><h2 id="_1-包命名" tabindex="-1"><a class="header-anchor" href="#_1-包命名"><span>1. 包命名</span></a></h2><p><strong>包名</strong>统一使用<strong>小写</strong>，<strong>点分隔符</strong>之间有且仅有一个自然语义的英文单词或者多个单词自然连接到一块（如 springframework，deepspace不需要使用任何分割）。包名统一使用单数形式，如果类命有复数含义，则可以使用复数形式。</p><p>包名的构成可以分为以下几四部分【前缀】 【发起者名】【项目名】【模块名】。常见的前缀可以分为以下几种：</p><table><thead><tr><th>前缀</th><th>例</th><th>含义</th></tr></thead><tbody><tr><td>indi或onem</td><td>indi.发起者名.项目名.模块名.……</td><td>个体项目个人发起，但非自己独自完成可公开或私有项目，copyright主要属于发起者。</td></tr><tr><td>pers</td><td>pers.个人名.项目名.模块名.……</td><td>个人项目指个人发起，独自完成，可分享的项目copyright主要属于个人</td></tr><tr><td>priv</td><td>priv.个人名.项目名.模块名.……</td><td>私有项目，指个人发起，独自完成非公开的私人使用的项目，copyright属于个人。</td></tr><tr><td>team</td><td>team.团队名.项目名.模块名.……</td><td>团队项目，指由团队发起并由该团队开发的项目copyright属于该团队所有</td></tr><tr><td>顶级域名</td><td>com.公司名.项目名.模块名.……</td><td>公司项目copyright由项目发起的公司所有</td></tr></tbody></table><h2 id="_2-类命名" tabindex="-1"><a class="header-anchor" href="#_2-类命名"><span>2. 类命名</span></a></h2><p><strong>类名使用大驼峰命名形式</strong>，类命通常时<strong>名词或名词短语</strong> ，接口名除了用名词和名词短语以外，还可以使用形容词或形容词短语，如Cloneable，Callable等，表示实现该接口的类有某种功能或能力。对于测试类则以它要测试的类开头，以Test结尾，如HashMapTest。</p><p>对于一些特殊特有名词缩写也可以使用全大写命名，比如XMLHttpRequest，不过笔者认为缩写三个字母以内都大写，超过三个字母则按照要给单词算。这个没有标准如阿里巴巴中fastjson用JSONObject作为类命，而google则使用JsonObjectRequest命名，对于这种特殊的缩写，原则是统一就好。</p><table><thead><tr><th>属性(类)</th><th>约束</th><th>例</th></tr></thead><tbody><tr><td>抽象</td><td>Abstract 或Base 开头</td><td>BaseUserService</td></tr><tr><td>枚举</td><td>Enum 作为后缀</td><td>OSType</td></tr><tr><td>工具</td><td>Utils作为后缀</td><td>StringUtils</td></tr><tr><td>异常</td><td>Exception结尾</td><td>RuntimeException</td></tr><tr><td>接口实现</td><td>接口名+ Impl</td><td>UserServiceImpl</td></tr><tr><td>领域模型相</td><td>/DO/DTO/VO/DAO</td><td>正例：UserDAO反例：UserDao</td></tr><tr><td>设计模式相关</td><td>Builder，Factory等</td><td>当使用到设计模式时要使用对应的设计模式作为后缀如ThreadFactory</td></tr><tr><td>处理特定功能</td><td>Handler，PredicateValidator</td><td>表示处理器，校验器，断言这些类工厂还有配套的方法名如handle，predicate，validate</td></tr><tr><td>测试</td><td>Test后缀</td><td>UserServiceTest表示用来测试UserService类的</td></tr><tr><td>MVC分层</td><td>Controller，ServiceServiceImpl，DAO后缀</td><td>UserManageControllerUserManageDAO</td></tr></tbody></table><h2 id="_3-方法" tabindex="-1"><a class="header-anchor" href="#_3-方法"><span>3. 方法</span></a></h2><p><strong>方法命名采用小驼峰的形式</strong>，首字小写，往后的每个单词首字母都要大写。和类名不同的是，方法命名一般为<strong>动词或动词短语</strong> ，与参数或参数名共同组成动宾短语，即动词 + 名词。一个好的函数名一般能通过名字直接获知该函数实现什么样的功能。</p><h3 id="_3-1-返回真伪值的方法" tabindex="-1"><a class="header-anchor" href="#_3-1-返回真伪值的方法"><span>3.1 返回真伪值的方法</span></a></h3><p>注：pre- prefix前缀，suf- suffix后缀，alo-alone 单独使用</p><table><thead><tr><th>位置</th><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>pre</td><td>is</td><td>对象是否符合期待的状态</td><td>isValid</td></tr><tr><td>pre</td><td>can</td><td>对象能否执行所期待的动作</td><td>canRemove</td></tr><tr><td>pre</td><td>should</td><td>调用方执行某个命令或方法是好还是不好应不应该，或者说推荐还是不推荐</td><td>shouldMigrate</td></tr><tr><td>pre</td><td>has</td><td>对象是否持有所期待的数据和属性</td><td>hasObservers</td></tr><tr><td>pre</td><td>needs</td><td>调用方是否需要执行某个命令或方法</td><td>needsMigrate</td></tr></tbody></table><h3 id="_3-2-用来检查的方法" tabindex="-1"><a class="header-anchor" href="#_3-2-用来检查的方法"><span>3.2 用来检查的方法</span></a></h3><table><thead><tr><th>位置</th><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>pre</td><td>ensure</td><td>检查是否为期待的状态不是则抛出异常或返回error code</td><td>ensureCapacity</td></tr><tr><td>pre</td><td>validate</td><td>检查是否为正确的状态不是则抛出异常或返回error code</td><td>validateInputs</td></tr></tbody></table><h3 id="_3-3-按需求才执行的方法" tabindex="-1"><a class="header-anchor" href="#_3-3-按需求才执行的方法"><span>3.3 按需求才执行的方法</span></a></h3><table><thead><tr><th>位置</th><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>suf</td><td>IfNeeded</td><td>需要的时候执行不需要则什么都不做</td><td>drawIfNeeded</td></tr><tr><td>pre</td><td>might</td><td>同上</td><td>mightCreate</td></tr><tr><td>pre</td><td>try</td><td>尝试执行失败时抛出异常或是返回errorcode</td><td>tryCreate</td></tr><tr><td>suf</td><td>OrDefault</td><td>尝试执行失败时返回默认值</td><td>getOrDefault</td></tr><tr><td>suf</td><td>OrElse</td><td>尝试执行失败时返回实际参数中指定的值</td><td>getOrElse</td></tr><tr><td>pre</td><td>force</td><td>强制尝试执行error抛出异常或是返回值</td><td>forceCreate, forceStop</td></tr></tbody></table><h3 id="_3-4-异步相关方法" tabindex="-1"><a class="header-anchor" href="#_3-4-异步相关方法"><span>3.4 异步相关方法</span></a></h3><table><thead><tr><th>位置</th><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>pre</td><td>blocking</td><td>线程阻塞方法</td><td>blockingGetUser</td></tr><tr><td>suf</td><td>InBackground</td><td>执行在后台线程</td><td>doInBackground</td></tr><tr><td>suf</td><td>Async</td><td>异步方法</td><td>sendAsync</td></tr><tr><td>suf</td><td>Sync</td><td>同步方法</td><td>sendSync</td></tr><tr><td>pre/alo</td><td>schedule</td><td>Job和Task放入队列</td><td>schedule, scheduleJob</td></tr><tr><td>pre/alo</td><td>post</td><td>同上</td><td>postJob</td></tr><tr><td>pre/alo</td><td>execute</td><td>执行异步或同步方法</td><td>execute,executeTask</td></tr><tr><td>pre/alo</td><td>start</td><td>同上</td><td>star,tstartJob</td></tr><tr><td>pre/alo</td><td>cancel</td><td>停止异步方法</td><td>cance,cancelJob</td></tr><tr><td>pre/alo</td><td>stop</td><td>同上</td><td>stop,stopJob</td></tr></tbody></table><h3 id="_3-5-回调方法" tabindex="-1"><a class="header-anchor" href="#_3-5-回调方法"><span>3.5 回调方法</span></a></h3><table><thead><tr><th>位置</th><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>pre</td><td>on</td><td>事件发生时执行</td><td>onCompleted</td></tr><tr><td>pre</td><td>before</td><td>事件发生前执行</td><td>beforeUpdate</td></tr><tr><td>pre</td><td>pre</td><td>同上</td><td>preUpdate</td></tr><tr><td>pre</td><td>will</td><td>同上</td><td>willUpdate</td></tr><tr><td>pre</td><td>after</td><td>事件发生后执行</td><td>afterUpdate</td></tr><tr><td>pre</td><td>post</td><td>同上</td><td>postUpdate</td></tr><tr><td>pre</td><td>did</td><td>同上</td><td>didUpdate</td></tr><tr><td>pre</td><td>should</td><td>确认事件是否可以执行</td><td>shouldUpdate</td></tr></tbody></table><h3 id="_3-6-操作对象生命周期的方法" tabindex="-1"><a class="header-anchor" href="#_3-6-操作对象生命周期的方法"><span>3.6 操作对象生命周期的方法</span></a></h3><table><thead><tr><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>initialize</td><td>初始化或延迟初始化使用</td><td>initialize</td></tr><tr><td>pause</td><td>暂停</td><td>onPause , pause</td></tr><tr><td>stop</td><td>停止</td><td>onStop, stop</td></tr><tr><td>abandon</td><td>销毁的替代</td><td>abandon</td></tr><tr><td>destroy</td><td>同上</td><td>destroy</td></tr><tr><td>dispose</td><td>同上</td><td>dispose</td></tr></tbody></table><h3 id="_3-7-与集合操作相关的方法" tabindex="-1"><a class="header-anchor" href="#_3-7-与集合操作相关的方法"><span>3.7 与集合操作相关的方法</span></a></h3><table><thead><tr><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>contains</td><td>是包含指定对象相同的对象</td><td>contains</td></tr><tr><td>add</td><td>添加</td><td>addJob</td></tr><tr><td>append</td><td>添加</td><td>appendJob</td></tr><tr><td>insert</td><td>插入到下标n</td><td>insertJob</td></tr><tr><td>put</td><td>添加与key对应的元素</td><td>putJob</td></tr><tr><td>remove</td><td>移除元素</td><td>removeJob</td></tr><tr><td>enqueue</td><td>添加到队列的最末位</td><td>enqueueJob</td></tr><tr><td>dequeue</td><td>从队列中头部取出并移除</td><td>dequeueJob</td></tr><tr><td>push</td><td>添加到栈头</td><td>pushJob</td></tr><tr><td>pop</td><td>从栈头取出并移除</td><td>popJob</td></tr><tr><td>peek</td><td>从栈头取出但不移除</td><td>peekJob</td></tr><tr><td>find</td><td>寻找符合条件的某物</td><td>findById</td></tr></tbody></table><h3 id="_3-8-与数据相关的方法" tabindex="-1"><a class="header-anchor" href="#_3-8-与数据相关的方法"><span>3.8 与数据相关的方法</span></a></h3><table><thead><tr><th>单词</th><th>意义</th><th>例</th></tr></thead><tbody><tr><td>create</td><td>新创建</td><td>createAccount</td></tr><tr><td>new</td><td>新创建</td><td>newAccount</td></tr><tr><td>from</td><td>从既有的某物新建或是从其他的数据新建</td><td>fromConfig</td></tr><tr><td>to</td><td>转换</td><td>toString</td></tr><tr><td>update</td><td>更新既有某物</td><td>updateAccount</td></tr><tr><td>load</td><td>读取</td><td>loadAccount</td></tr><tr><td>fetch</td><td>远程读取</td><td>fetchAccount</td></tr><tr><td>delete</td><td>删除</td><td>deleteAccount</td></tr><tr><td>remove</td><td>删除</td><td>removeAccount</td></tr><tr><td>save</td><td>保存</td><td>saveAccount</td></tr><tr><td>store</td><td>保存</td><td>storeAccount</td></tr><tr><td>commit</td><td>保存</td><td>commitChange</td></tr><tr><td>apply</td><td>保存或应用</td><td>applyChange</td></tr><tr><td>clear</td><td>清除或是恢复到初始状态</td><td>clearAll</td></tr><tr><td>reset</td><td>清除或是恢复到初始状态</td><td>resetAll</td></tr></tbody></table><h3 id="_3-9-成对出现的动词" tabindex="-1"><a class="header-anchor" href="#_3-9-成对出现的动词"><span>3.9 成对出现的动词</span></a></h3><table><thead><tr><th>单词</th><th>意义</th></tr></thead><tbody><tr><td>get获取</td><td>set 设置</td></tr><tr><td>add 增加</td><td>remove 删除</td></tr><tr><td>create 创建</td><td>destory 移除</td></tr><tr><td>start 启动</td><td>stop 停止</td></tr><tr><td>open 打开</td><td>close 关闭</td></tr><tr><td>read 读取</td><td>write 写入</td></tr><tr><td>load 载入</td><td>save 保存</td></tr><tr><td>create 创建</td><td>destroy 销毁</td></tr><tr><td>begin 开始</td><td>end 结束</td></tr><tr><td>backup 备份</td><td>restore 恢复</td></tr><tr><td>import 导入</td><td>export 导出</td></tr><tr><td>split 分割</td><td>merge 合并</td></tr><tr><td>inject 注入</td><td>extract 提取</td></tr><tr><td>attach 附着</td><td>detach 脱离</td></tr><tr><td>bind 绑定</td><td>separate 分离</td></tr><tr><td>view 查看</td><td>browse 浏览</td></tr><tr><td>edit 编辑</td><td>modify 修改</td></tr><tr><td>select 选取</td><td>mark 标记</td></tr><tr><td>copy 复制</td><td>paste 粘贴</td></tr><tr><td>undo 撤销</td><td>redo 重做</td></tr><tr><td>insert 插入</td><td>delete 移除</td></tr><tr><td>add 加入</td><td>append 添加</td></tr><tr><td>clean 清理</td><td>clear 清除</td></tr><tr><td>index 索引</td><td>sort 排序</td></tr><tr><td>find 查找</td><td>search 搜索</td></tr><tr><td>increase 增加</td><td>decrease 减少</td></tr><tr><td>play 播放</td><td>pause 暂停</td></tr><tr><td>launch 启动</td><td>run 运行</td></tr><tr><td>compile 编译</td><td>execute 执行</td></tr><tr><td>debug 调试</td><td>trace 跟踪</td></tr><tr><td>observe 观察</td><td>listen 监听</td></tr><tr><td>build 构建</td><td>publish 发布</td></tr><tr><td>input 输入</td><td>output 输出</td></tr><tr><td>encode 编码</td><td>decode 解码</td></tr><tr><td>encrypt 加密</td><td>decrypt 解密</td></tr><tr><td>compress 压缩</td><td>decompress 解压缩</td></tr><tr><td>pack 打包</td><td>unpack 解包</td></tr><tr><td>parse 解析</td><td>emit 生成</td></tr><tr><td>connect 连接</td><td>disconnect 断开</td></tr><tr><td>send 发送</td><td>receive 接收</td></tr><tr><td>download 下载</td><td>upload 上传</td></tr><tr><td>refresh 刷新</td><td>synchronize 同步</td></tr><tr><td>update 更新</td><td>revert 复原</td></tr><tr><td>lock 锁定</td><td>unlock 解锁</td></tr><tr><td>check out 签出</td><td>check in 签入</td></tr><tr><td>submit 提交</td><td>commit 交付</td></tr><tr><td>push 推</td><td>pull 拉</td></tr><tr><td>expand 展开</td><td>collapse 折叠</td></tr><tr><td>begin 起始</td><td>end 结束</td></tr><tr><td>start 开始</td><td>finish 完成</td></tr><tr><td>enter 进入</td><td>exit 退出</td></tr><tr><td>abort 放弃</td><td>quit 离开</td></tr><tr><td>obsolete 废弃</td><td>depreciate 废旧</td></tr><tr><td>collect 收集</td><td>aggregate 聚集</td></tr></tbody></table><h2 id="_4-变量-常量命名" tabindex="-1"><a class="header-anchor" href="#_4-变量-常量命名"><span>4. 变量&amp;常量命名</span></a></h2><h3 id="_4-1-变量命名" tabindex="-1"><a class="header-anchor" href="#_4-1-变量命名"><span>4.1 变量命名</span></a></h3><p>变量是指在程序运行中可以改变其值的量，包括成员变量和局部变量。变量名由多单词组成时，第一个单词的首字母小写，其后单词的首字母大写，俗称骆驼式命名法（也称驼峰命名法），如 computedValues，index、变量命名时，尽量简短且能清楚的表达变量的作用，命名体现具体的业务含义即可。</p><p>变量名不应以下划线或美元符号开头，尽管这在语法上是允许的。变量名应简短且富于描述。变量名的选用应该易于记忆，即，能够指出其用途。尽量避免单个字符的变量名，除非是一次性的临时变量。pojo中的布尔变量，都不要加is( 数据库中的布尔字段全都要加 is_ 前缀)。</p><h3 id="_4-2-常量命名" tabindex="-1"><a class="header-anchor" href="#_4-2-常量命名"><span>4.2 常量命名</span></a></h3><p>常量命名CONSTANT_CASE，一般采用全部大写（作为方法参数时除外），单词间用下划线分割。那么什么是常量呢？</p><p>常量是在作用域内保持不变的值，一般使用final进行修饰。一般分为三种，全局常量（public static final修饰），类内常量（private static final 修饰）以及局部常量（方法内，或者参数中的常量），局部常量比较特殊，通常采用小驼峰命名即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 一个demo</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@author</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> Jann Lee</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * @date 2019-12-07 00:25</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> HelloWorld</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 局部常量(正例)</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> long</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> USER_MESSAGE_CACHE_EXPIRE_TIME</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3600</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 局部常量(反例，命名不清晰）</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> long</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MESSAGE_CACHE_TIME</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3600</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 全局常量</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ERROR_MESSAGE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error message</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 成员变量</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> currentUserId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 控制台打印 </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * {@code message} 信息</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@param</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> message</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 消息体，局部常量</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sayHello</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello world!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常量一般都有自己的业务含义,<strong>不要害怕长度过长而进行省略或者缩写</strong>。如，用户消息缓存过期时间的表示，那种方式更佳清晰，交给你来评判。</p><h2 id="_5-代码注解" tabindex="-1"><a class="header-anchor" href="#_5-代码注解"><span>5. 代码注解</span></a></h2><h3 id="_5-1-注解的原则" tabindex="-1"><a class="header-anchor" href="#_5-1-注解的原则"><span>5.1 注解的原则</span></a></h3><p>好的命名增加代码阅读性，代码的命名往往有严格的限制。而注解不同，程序员往往可以自由发挥，单并不意味着可以为所欲为之胡作非为。优雅的注解通常要满足三要素。</p><ol><li><strong>Nothing is strange</strong> 没有注解的代码对于阅读者非常不友好，哪怕代码写的在清除，阅读者至少从心理上会有抵触，更何况代码中往往有许多复杂的逻辑，所以一定要写注解，不仅要记录代码的逻辑，还有说清楚修改的逻辑。</li><li><strong>Less is more</strong> 从代码维护角度来讲，代码中的注解一定是精华中的精华。合理清晰的命名能让代码易于理解，对于逻辑简单且命名规范，能够清楚表达代码功能的代码不需要注解。滥用注解会增加额外的负担，更何况大部分都是废话。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 根据id获取信息【废话注解】</span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getMessageById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>Advance with the time</strong> 注解应该随着代码的变动而改变，注解表达的信息要与代码中完全一致。通常情况下修改代码后一定要修改注解。</li></ol><h3 id="_5-2-注解格式" tabindex="-1"><a class="header-anchor" href="#_5-2-注解格式"><span>5.2 注解格式</span></a></h3><p>注解大体上可以分为两种，一种是javadoc注解，另一种是简单注解。javadoc注解可以生成JavaAPI为外部用户提供有效的支持javadoc注解通常在使用IDEA，或者Eclipse等开发工具时都可以自动生成，也支持自定义的注解模板，仅需要对对应的字段进行解释。参与同一项目开发的同学，尽量设置成相同的注解模板。</p><h4 id="a-包注解" tabindex="-1"><a class="header-anchor" href="#a-包注解"><span>a. 包注解</span></a></h4><p>包注解在工作中往往比较特殊，通过包注解可以快速知悉当前包下代码是用来实现哪些功能，强烈建议工作中加上，尤其是对于一些比较复杂的包，包注解一般在包的根目录下，名称统一为package-info.java。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/*</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 落地质量检测</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 1. 用来解决什么问题</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *  对广告主投放的广告落地页进行性能检测，模拟不同的系统，如Android，IOS等; 模拟不同的网络：2G，3G，4G，wifi等</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 2. 如何实现</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *  基于chrome浏览器，用chromedriver驱动浏览器，设置对应的网络，OS参数，获取到浏览器返回结果。</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 注意：</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *  网络环境配置信息：目前使用是常规速度，可以根据实际情况进行调整</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * @author xxx</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * @time 2010/12/7 20:3 下午</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">example</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">testjar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">okhttp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-类注接" tabindex="-1"><a class="header-anchor" href="#b-类注接"><span>b. 类注接</span></a></h4><p>javadoc注解中，每个类都必须有注解。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * Copyright (C), 2019-2020, Jann balabala...</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * &lt;p&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 类的介绍：这是一个用来做什么事情的类，有哪些功能，用到的技术.....</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@author</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 类创建者姓名 保持对齐</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@version</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 版本号 保持对齐</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * @date 创建日期 保持对齐</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-属性注解" tabindex="-1"><a class="header-anchor" href="#c-属性注解"><span>c. 属性注解</span></a></h4><p>在每个属性前面必须加上属性注释，通常有一下两种形式，至于怎么选择，你高兴就好，不过一个项目中要保持统一。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/** 提示信息 */</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> userName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 密码</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> password</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="d-方法注释" tabindex="-1"><a class="header-anchor" href="#d-方法注释"><span>d. 方法注释</span></a></h4><p>在每个方法前面必须加上方法注释，对于方法中的每个参数，以及返回值都要有说明。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 方法的详细说明，能干嘛，怎么实现的，注意事项...</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@param</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> xxx</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 参数1的使用说明， 能否为null</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@return</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 返回结果的说明， 不同情况下会返回怎样的结果</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@throws</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> 异常类型</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 注明从此类方法中抛出异常的说明</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="e-构造方法注释" tabindex="-1"><a class="header-anchor" href="#e-构造方法注释"><span>e. 构造方法注释</span></a></h4><p>在每个构造方法前面必须加上注释，注释模板如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 构造方法的详细说明</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@param</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> xxx</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 参数1的使用说明， 能否为null</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@throws</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> 异常类型</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 注明从此类方法中抛出异常的说明</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而简单注解往往是需要工程师字节定义，在使用注解时应该注意一下几点：</p><ol><li>枚举类的各个属性值都要使用注解，枚举可以理解为是常量，通常不会发生改变，通常会被在多个地方引用，对枚举的修改和添加属性通常会带来很大的影响。</li><li>保持排版整洁，不要使用行尾注释；双斜杠和星号之后要用1个空格分隔。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 反例：不要使用行尾注释</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//反例：换行符与注释之间没有缩进</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 18</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 正例：姓名</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 1. 多行注释</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 2. 对于不同的逻辑说明，可以用空行分隔</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-javadoc使用" tabindex="-1"><a class="header-anchor" href="#_6-javadoc使用"><span>6. Javadoc使用</span></a></h2><h3 id="_6-1-常用注解" tabindex="-1"><a class="header-anchor" href="#_6-1-常用注解"><span>6.1 常用注解</span></a></h3><p>Javadoc命令是用来生成自己的API文档，使用方式：</p><ul><li>javadoc 源文件名.java</li><li>javadoc -d 文档存放目录 源文件名.java</li><li>通过IDEA生成Javadoc ： Tools -&gt; Generate JavaDoc</li></ul><table><thead><tr><th><strong>标签</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>@author</code></td><td>作者标识</td></tr><tr><td><code>@version</code></td><td>版本号</td></tr><tr><td><code>@return</code></td><td>对函数返回值的描述</td></tr><tr><td><code>@deprecated</code></td><td>标识过期API（为了保证兼容性，仍可用，但不推荐用）</td></tr><tr><td><code>@throws</code></td><td>构造函数或方法会抛出的异常</td></tr><tr><td><code>@exception</code></td><td>同@throws</td></tr><tr><td><code>@see</code></td><td>引用，查看相关的内容，如类，方法，变量等，必须顶头写</td></tr><tr><td><code>{@link 包.类#成员}</code></td><td>引用，同@see，但可写在任意位置</td></tr><tr><td><code>{@value}</code></td><td>对常量注释，如果其值包含在文档中，通过改标签引用常量的值</td></tr><tr><td><code>{@code}}</code></td><td>{@code text}将文本标记为code，会被解析成text} ,在Javadoc成只要涉及到类名或者方法名，都需要使用@code进行标记</td></tr><tr><td><code>@param</code></td><td>说明方法的参数</td></tr><tr><td><code>@inheritDoc</code></td><td>用于继承父类中的Javadoc，父类的文档注释，被继承到了子类</td></tr><tr><td><code>XXX&lt;br&gt;</code></td><td>换行</td></tr><tr><td><code>XXX&lt;p&gt;</code></td><td>分段</td></tr><tr><td><code>&lt;pre&gt;XXX&lt;/pre&gt;</code></td><td>段落</td></tr><tr><td><code>&lt;a href=&quot;https://weixin.qq.com&quot;&gt;授权回调文档&lt;/a&gt;</code></td><td>a标签</td></tr></tbody></table><h3 id="_6-2-link使用" tabindex="-1"><a class="header-anchor" href="#_6-2-link使用"><span>6.2 @link使用</span></a></h3>',76)),(0,d.Lk)("p",null,[(0,d.Lk)("strong",{onLink:s[0]||(s[0]=()=>{})},"@see 和 {@link} 区别：",32),s[1]||(s[1]=(0,d.eW)("在前边可以加其他东西仍然可以跳转，但@see不可以"))]),s[3]||(s[3]=(0,d.Fv)('<table><thead><tr><th><strong>示例</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><code>{@link 类名}</code></td><td>跳转到类</td></tr><tr><td><code>{@link 类名#方法名}</code></td><td>跳转到类的方法</td></tr><tr><td><code>{@link 类名#属性名}</code></td><td>跳转到类的属性</td></tr><tr><td><code>{@link #方法名}</code></td><td>跳转到本类的方法</td></tr><tr><td><code>{@link #属性名}</code></td><td>跳转到本类的属性</td></tr><tr><td><code>{@link &lt;a href=&quot;https://www.baidu.com&quot;&gt;网站/&lt;/a&gt;}</code></td><td>跳转到网址</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">link</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> com</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">wshoto</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">custom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">service</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">constant</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ActivityConst</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#HISTORY_RELATION_ON</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',2))])}]]),n=JSON.parse('{"path":"/article/x7yjesb4/","title":"类方法变量命名规范","lang":"zh-CN","frontmatter":{"title":"类方法变量命名规范","tags":["规范"],"createTime":"2024/11/22 16:47:04","cover":"/cover/cover_doc.png","excerpt":"码农必备，规范命名","permalink":"/article/x7yjesb4/","description":"0. 通用命名规则 尽量不要使用拼音；杜绝拼音和英文混用。对于一些通用的表示或者难以用英文描述的可以采用拼音，一旦采用拼音就坚决不能和英文混用。正例：BeiJing， HangZhou 反例：validateCanShu 命名过程中尽量不要出现特殊的字符，常量除外。 尽量不要和jdk或者框架中已存在的类重名，也不能使用java中的关键字命名。 妙用介词...","head":[["meta",{"property":"og:url","content":"https://www.unravely.press/article/x7yjesb4/"}],["meta",{"property":"og:site_name","content":"Unravely"}],["meta",{"property":"og:title","content":"类方法变量命名规范"}],["meta",{"property":"og:description","content":"0. 通用命名规则 尽量不要使用拼音；杜绝拼音和英文混用。对于一些通用的表示或者难以用英文描述的可以采用拼音，一旦采用拼音就坚决不能和英文混用。正例：BeiJing， HangZhou 反例：validateCanShu 命名过程中尽量不要出现特殊的字符，常量除外。 尽量不要和jdk或者框架中已存在的类重名，也不能使用java中的关键字命名。 妙用介词..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.unravely.press/cover/cover_doc.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-22T10:34:02.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.unravely.press/cover/cover_doc.png"}],["meta",{"name":"twitter:image:alt","content":"类方法变量命名规范"}],["meta",{"property":"article:tag","content":"规范"}],["meta",{"property":"article:modified_time","content":"2024-11-22T10:34:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类方法变量命名规范\\",\\"image\\":[\\"https://www.unravely.press/cover/cover_doc.png\\"],\\"dateModified\\":\\"2024-11-22T10:34:02.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"0. 通用命名规则","slug":"_0-通用命名规则","link":"#_0-通用命名规则","children":[]},{"level":2,"title":"1. 包命名","slug":"_1-包命名","link":"#_1-包命名","children":[]},{"level":2,"title":"2. 类命名","slug":"_2-类命名","link":"#_2-类命名","children":[]},{"level":2,"title":"3. 方法","slug":"_3-方法","link":"#_3-方法","children":[{"level":3,"title":"3.1 返回真伪值的方法","slug":"_3-1-返回真伪值的方法","link":"#_3-1-返回真伪值的方法","children":[]},{"level":3,"title":"3.2 用来检查的方法","slug":"_3-2-用来检查的方法","link":"#_3-2-用来检查的方法","children":[]},{"level":3,"title":"3.3 按需求才执行的方法","slug":"_3-3-按需求才执行的方法","link":"#_3-3-按需求才执行的方法","children":[]},{"level":3,"title":"3.4 异步相关方法","slug":"_3-4-异步相关方法","link":"#_3-4-异步相关方法","children":[]},{"level":3,"title":"3.5 回调方法","slug":"_3-5-回调方法","link":"#_3-5-回调方法","children":[]},{"level":3,"title":"3.6 操作对象生命周期的方法","slug":"_3-6-操作对象生命周期的方法","link":"#_3-6-操作对象生命周期的方法","children":[]},{"level":3,"title":"3.7 与集合操作相关的方法","slug":"_3-7-与集合操作相关的方法","link":"#_3-7-与集合操作相关的方法","children":[]},{"level":3,"title":"3.8 与数据相关的方法","slug":"_3-8-与数据相关的方法","link":"#_3-8-与数据相关的方法","children":[]},{"level":3,"title":"3.9 成对出现的动词","slug":"_3-9-成对出现的动词","link":"#_3-9-成对出现的动词","children":[]}]},{"level":2,"title":"4. 变量&常量命名","slug":"_4-变量-常量命名","link":"#_4-变量-常量命名","children":[{"level":3,"title":"4.1 变量命名","slug":"_4-1-变量命名","link":"#_4-1-变量命名","children":[]},{"level":3,"title":"4.2 常量命名","slug":"_4-2-常量命名","link":"#_4-2-常量命名","children":[]}]},{"level":2,"title":"5. 代码注解","slug":"_5-代码注解","link":"#_5-代码注解","children":[{"level":3,"title":"5.1 注解的原则","slug":"_5-1-注解的原则","link":"#_5-1-注解的原则","children":[]},{"level":3,"title":"5.2 注解格式","slug":"_5-2-注解格式","link":"#_5-2-注解格式","children":[]}]},{"level":2,"title":"6. Javadoc使用","slug":"_6-javadoc使用","link":"#_6-javadoc使用","children":[{"level":3,"title":"6.1 常用注解","slug":"_6-1-常用注解","link":"#_6-1-常用注解","children":[]},{"level":3,"title":"6.2 @link使用","slug":"_6-2-link使用","link":"#_6-2-link使用","children":[]}]}],"readingTime":{"minutes":14.72,"words":4417},"git":{"createdTime":1732271642000,"updatedTime":1732271642000,"contributors":[{"name":"banxia","email":"yutong9717@163.com","commits":1}]},"autoDesc":true,"filePathRelative":"blog/standard/类方法变量命名规范.md","categoryList":[{"id":"126ac9","sort":10002,"name":"blog"},{"id":"c8d1c7","sort":10007,"name":"standard"}],"bulletin":false}')}}]);