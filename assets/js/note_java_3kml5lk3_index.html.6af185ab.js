"use strict";(self.webpackChunkunravely_blog=self.webpackChunkunravely_blog||[]).push([[5433],{7641:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>e,data:()=>t});var n=a(6254);const l={},e=(0,a(1021).A)(l,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<blockquote><p>https://cloud.tencent.com/developer/article/1953236</p></blockquote><p>Java中锁分为以下几种：</p><ul><li>乐观锁、悲观锁</li><li>自旋锁、适应性自旋锁</li><li>锁升级(无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁)</li><li>公平锁、非公平锁</li><li>可重入锁</li><li>独享锁、共享锁</li><li>互斥锁、读写锁</li></ul><h1 id="乐观锁-悲观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁-悲观锁"><span>乐观锁 &amp; 悲观锁</span></a></h1><p>两种锁只是一种概念。</p><ul><li>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</li><li>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</li></ul><h2 id="乐观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁"><span>乐观锁：</span></a></h2><p><strong>概念</strong>：乐观锁认为一个线程去拿数据的时候不会有其他线程对数据进行更改，所以不会上锁。<strong>实现</strong>：CAS机制、版本号机制。以Atomic开头的包装类，例如<strong>AtomicBoolean</strong>，<strong>AtomicInteger</strong>，<strong>AtomicLong</strong>。</p><h2 id="悲观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁"><span>悲观锁：</span></a></h2><p><strong>概念</strong>：悲观锁认为一个线程去拿数据时一定会有其他线程对数据进行更改。所以一个线程在拿数据的时候都会顺便加锁，这样别的线程此时想拿这个数据就会阻塞。</p><p><strong>实现</strong>：加锁。Java中，synchronized关键字和Lock的实现类都是悲观锁。</p><p>Synchronized关键字会让没有得到锁资源的线程进入<strong>BLOCKED</strong>状态，而后在争夺到锁资源后恢复为<strong>RUNNABLE</strong>状态，这个过程中涉及到操作系统<strong>用户模式</strong>和<strong>内核模式</strong>的转换，代价比较高。</p><p>尽管Java1.6为Synchronized做了优化，增加了从<strong>偏向锁</strong>到<strong>轻量级锁</strong>再到<strong>重量级锁</strong>的过度，但是在最终转变为重量级锁之后，性能仍然较低。</p><h1 id="行锁与表锁" tabindex="-1"><a class="header-anchor" href="#行锁与表锁"><span>行锁与表锁</span></a></h1><p>当执行 <code>select ... for update</code>时，将会把数据锁住，因此，我们需要注意一下锁的级别。MySQL InnoDB 默认为行级锁。当查询语句指定了主键时，MySQL会执行「行级锁」，否则MySQL会执行「表锁」。</p><p>常见情况如下：</p><ul><li>若明确指明主键，且结果集有数据，行锁；</li><li>若明确指明主键，结果集无数据，则无锁；</li><li>若无主键，且非主键字段无索引，则表锁；</li><li>若使用主键但主键不明确，则使用表锁；</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> tbl_user </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> for</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> update</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>小结：</strong> innoDB的行锁是通过给索引上的索引项加锁实现的，因此，只有通过索引检索数据，才会采用行锁，否则使用的是表锁。</p><h1 id="线程嵌套造成死锁" tabindex="-1"><a class="header-anchor" href="#线程嵌套造成死锁"><span>线程嵌套造成死锁</span></a></h1><p><strong>一个死锁问题的分析</strong></p><p>现象：当同时送入线程池的任务大于配置core-size时，会引起程序死锁。 测试代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">\t/**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">\t* 创建i个nestedCall任务,送入线程池</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">\t*/</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> throws InterruptedException </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        ThreadPoolTaskExecutor</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> taskExecutor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> taskExecutor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">            int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> finalI</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            taskExecutor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">submit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> outerCall</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">taskExecutor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> finalI</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">task push over</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    * 先睡2s，再将一个任务送入线程池，再等待其完成</span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    */</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> outerCall</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Executor taskExecutor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">outer </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            TimeUnit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">SECONDS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            CountDownLatch</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> latch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> CountDownLatch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            taskExecutor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">execute</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">\t\t\t\tnestedCall</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">latch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            });</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            latch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">await</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printStackTrace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//这个里层的</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> nestedCall</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CountDownLatch latch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">nested </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                latch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">countDown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ThreadPoolTaskExecutor </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">taskExecutor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        ThreadPoolTaskExecutor</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ThreadPoolTaskExecutor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setCorePoolSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setMaxPoolSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setQueueCapacity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">12</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setKeepAliveSeconds</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">30</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setRejectedExecutionHandler</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rejectedExecutionHandler</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setWaitForTasksToCompleteOnShutdown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setAwaitTerminationSeconds</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">30</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">initialize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> RejectedExecutionHandler </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rejectedExecutionHandler</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getQueue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">put</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">InterruptedException </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printStackTrace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        };</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果运行main方法会产生什么结果呢，如下：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>task push over</span></span>\n<span class="line"><span>outer 0</span></span>\n<span class="line"><span>outer 1</span></span>\n<span class="line"><span>outer 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不会再有新的输出了，程序已经死锁。 为什么呢？ 我们来看线程池里边发生的事情（数字的顺序可能是乱的，这里只是其中一种情况）：</p><ol><li>执行outerCall i=0</li><li>执行outerCall i=1</li><li>执行outerCall i=2</li><li>送入等待队列 nestedCall i=0</li><li>送入等待队列 nestedCall i=1</li><li>送入等待队列 nestedCall i=2</li></ol><p>outerCall的执行占据了所有的活动线程（3个），等待nestedCall完成。然而nestedCall在当前线程池的等待队列中如果outerCall不退出，他永远也得不到执行的机会，死锁了。</p><p><strong>结论</strong></p><p>在使用java线程池的时候要特别注意最好不要有这种<strong>嵌套</strong>的任务。如果有这种嵌套使用线程池的情况的话一定要保证外层的线程不会等待内层线程完成再返回，或者为等待添加超时时间</p><h1 id="锁分类" tabindex="-1"><a class="header-anchor" href="#锁分类"><span>锁分类</span></a></h1><p>https://blog.csdn.net/weixin_60272582/article/details/123265596</p><p><img src="https://img-blog.csdnimg.cn/16d6679a2a0b4a2285f0954bdccc2925.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATXIu57Gz5pav54m55YS_6LW1,size_15,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>是不是吓一跳,下面我们来一项一项说明各种锁的概念以及使用</p><h2 id="_1-乐观锁" tabindex="-1"><a class="header-anchor" href="#_1-乐观锁"><span>1.乐观锁</span></a></h2><p>乐观锁顾名思义就是一种乐观的思想,认为读数据时没有别的线程进行过修改,所以不会上锁,写数据时判断当前与期望的值是否相同,如果相同进行更新(更新期间是要枷锁的,为了保证<a href="https://so.csdn.net/so/search?q=%E5%8E%9F%E5%AD%90%E6%80%A7&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">原子性</a>)</p><p>举例:java中的乐观锁---<a href="https://so.csdn.net/so/search?q=CAS&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">CAS</a></p><p>​ CAS的使用以及CAS<a href="https://so.csdn.net/so/search?q=%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">原子操作</a>面临的问题,以及解决方案</p><p>​ CAS的详细内容请参考</p><p><a href="https://blog.csdn.net/weixin_60272582/article/details/123164851?spm=1001.2014.3001.5501" target="_blank" rel="noopener noreferrer">多线程常见面试题总结(简单版)_Mr.米斯特儿赵的博客-CSDN博客</a> 第17个回答</p><h2 id="_2-悲观锁" tabindex="-1"><a class="header-anchor" href="#_2-悲观锁"><span>2.悲观锁</span></a></h2><p>悲观锁顾名思义就是一种悲观的思想,每次拿数据都会悲观的认为其他线程修改了数据,所以每次读写时都会上锁,其他线程想要读写这个数据时,就会被该线程阻塞 ,直到这个线程释放锁.</p><p>举例: java中的悲观锁 synchronized修饰的方法和方法块 比如我们尝试用的hashtable,以及StringBuffer他们的方法都被synchronized修饰,ReentrantLock不仅悲观还重入(也属于重入锁)</p><h2 id="_3-自旋锁" tabindex="-1"><a class="header-anchor" href="#_3-自旋锁"><span>3.自旋锁</span></a></h2><p>自旋锁就是在获取锁的时候，如果锁被其他线程获取,该线程就会一直循环等待,一直尝试着去获取锁,直到目标达成。而不像普通的锁那样，如果获取不到锁就进入阻塞</p><p>自旋锁的优点: 避免了线程切换的开销,不会使线程进入阻塞的状态,减少了不必要的上下文的切换,执行速度块</p><p>自旋锁的缺点: 长时间占用处理器,会白白消耗 处理器资源,却没有干任何事情,性能浪费，所以自旋等待的时间必须有一定的限度 超过限度就挂起 线程</p><p>自旋默认的次数: 10次</p><h2 id="_4-可重入锁-递归锁" tabindex="-1"><a class="header-anchor" href="#_4-可重入锁-递归锁"><span>4.可重入锁(递归锁)</span></a></h2><p>可重入锁使一种技术,任意线程在获取到 锁之后能够再次 获取 该锁而不会被锁阻塞</p><p>原理 : 通过组合自定义同步器来实现锁的获取和释放</p><p>再次获取锁: 识别获取 锁的线程是否为当前占据锁的线程,如果是,则再次成功获取,获取锁后,进行计数自增</p><p>释放锁: 释放锁 进行计数自减</p><p>java中的可重入锁:</p><p>ReentrantLock、synchronized修饰的方法或代码段</p><h2 id="_5-读写锁" tabindex="-1"><a class="header-anchor" href="#_5-读写锁"><span>5.读写锁</span></a></h2><p>读写锁使一种技术,通过ReentrantReadWriteLock类来实现的,为了提高性能,Java提供了读写锁,读的地方使用 读锁,写的地方使用写锁,在没有写锁的情况下,读锁是无阻塞的,多个读锁不互斥,读锁与写锁互斥,这是由jvm来控制的</p><p>读锁: 允许线程获取读锁,同时访问一个资源</p><p>写锁: 允许一个线程获取 写锁,不允许 同时访问一个资源</p><p>如何使用:<br> 1.创建一个读写锁 ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();</p><p>2.获取读锁和释放锁 // 获取读锁rwLock.readLock().lock();// 释放读锁rwLock.readLock().unlock();</p><p>3.获取写锁和释放锁 创建一个写锁rwLock.writeLock().lock();// 写锁 释rwLock.writeLock().unlock()</p><h2 id="_6-公平锁" tabindex="-1"><a class="header-anchor" href="#_6-公平锁"><span>6.公平锁</span></a></h2><p>公平锁使一种思想,多个线程按照顺序来获取锁 ,并发环境中,每个线程会去查看锁的维护队列,如果队列为空,就占有锁,如果队列不为空,就加入等待队列的末尾,按照FIFO原则获取锁</p><h2 id="_7-非公平锁" tabindex="-1"><a class="header-anchor" href="#_7-非公平锁"><span>7.非公平锁</span></a></h2><p>非公平锁也是一种思想,线程尝试获取锁,如果获取不到,按照公平锁的方式,多个线程获取锁不是按照 先到先得的顺序.是无序的,有可能后到了先获取到锁</p><p>优点: 比公平锁性能高</p><p>缺点: 线程 饥饿(某个线程很长一段时间获取不到锁)</p><p>举例: synchronized是非公平锁</p><p><strong>ReentrantLock通过构造函数指定该锁是公平的还是非公平的，默认是非公平的。</strong></p><h2 id="_8-共享锁" tabindex="-1"><a class="header-anchor" href="#_8-共享锁"><span>8.共享锁</span></a></h2><p>共享锁是一种思想,可以多个线程获取读锁,以共享的方式持有锁,和乐观锁还有读写锁同义</p><h2 id="_9-独占锁" tabindex="-1"><a class="header-anchor" href="#_9-独占锁"><span>9.独占锁</span></a></h2><p>独占锁是一种思想,只能有一个线程获取锁,以独有的方式持有锁,悲观锁和互斥锁同义</p><p>synchronized，ReentrantLock</p><h2 id="_10-重量级锁" tabindex="-1"><a class="header-anchor" href="#_10-重量级锁"><span>10.重量级锁</span></a></h2><p>synchronized 就是重量级锁,为了优化重量级锁,引入了轻量级锁和偏向锁</p><h2 id="_11-轻量级锁" tabindex="-1"><a class="header-anchor" href="#_11-轻量级锁"><span>11.轻量级锁</span></a></h2><p><strong>jdk6是加入的一种锁的优化机制</strong>,轻量级锁是在没有多线程竞争的情况下使用的CAS操作去消除同步使用的互斥量</p><p>上面理解起来很吃力,解析一下,首先是没有竞争,也就是说是单线程 ,两条以上线程,轻量级锁不会生效</p><h2 id="_12-偏向锁" tabindex="-1"><a class="header-anchor" href="#_12-偏向锁"><span>12.偏向锁</span></a></h2><p><strong>偏向锁 是JDK6时加入的一种锁优化机制：</strong> 在无竞争的情况下把整个同步都消除掉,连CAS操作都不去做了。偏是指偏心，它的意思是这个锁会偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁一直没有被其他的线程获取，则持有偏向锁的线程将永远不需要再进行同步。持有偏向锁的线程以后每次进入这个锁相关的同步块时，虚拟机都可以不再进行任何同步操作.</p><h2 id="_13-分段锁" tabindex="-1"><a class="header-anchor" href="#_13-分段锁"><span>13.分段锁</span></a></h2><p>是一种机制,是不是想到了ConcurrentHashMap了,默认情况下ConcurrentHashMap被细分为16个段(Segment)每次上锁只是锁的每个segment. segment通过继承ReentrntLock来进行加锁,只要保证每个segment是线程安全的,是不是就保证了全局的线程安全.</p><h2 id="_14-互斥锁" tabindex="-1"><a class="header-anchor" href="#_14-互斥锁"><span>14.互斥锁</span></a></h2><p>互斥锁和悲观锁还有独占锁同义,某个资源,只能被一个线程访问,其他线程不能访问.</p><p>例如上文提到的读写锁中的写锁,写与写之间是互斥的,写与读之间也是互斥的</p><h2 id="_15-同步锁" tabindex="-1"><a class="header-anchor" href="#_15-同步锁"><span>15.同步锁</span></a></h2><p>与互斥锁同义,字并发执行多个线程时,在同一时间只允许一个线程访问共享数据 synchronized</p><p><a href="https://download.csdn.net/download/weixin_38632006/12808349" target="_blank" rel="noopener noreferrer">Java锁之阻塞锁介绍和代码实例pdf<img src="https://csdnimg.cn/release/blogv2/dist/components/img/star.png" alt="img">0星超过10%的资源47KB<img src="https://csdnimg.cn/release/blogv2/dist/components/img/arrowDownWhite.png" alt="img">下载</a></p><h2 id="_16-死锁" tabindex="-1"><a class="header-anchor" href="#_16-死锁"><span>16.死锁</span></a></h2><p><strong>死锁是一种现象：</strong> 如线程A持有资源x，线程B持有资源y，线程A等待线程B释放资源y，线程B等待线程A释放资源x，两个线程都不释放自己持有的资源，则两个线程都获</p><p>取不到对方的资源，就会造成死锁。</p><p>Java中的死锁不能自行打破，所以线程死锁后，线程不能进行响应。所以一定要注意</p><p>程序的并发场景，避免造成死锁。</p><h2 id="_17-synchronized-简单总结" tabindex="-1"><a class="header-anchor" href="#_17-synchronized-简单总结"><span>17.synchronized(简单总结)</span></a></h2><p>synchronized是java中的关键字,用来修饰方法,对象实例,属于独占锁,悲观锁,可重入锁,非公平锁</p><p>用于实例方法时,锁住的是对象的实例也就是this</p><p>用于静态方法上,锁主的是Class类</p><h2 id="_18-lock和synchronized的区别" tabindex="-1"><a class="header-anchor" href="#_18-lock和synchronized的区别"><span>18.Lock和synchronized的区别</span></a></h2><p>lock 是java中的接口,是可重入锁,悲观锁,独占锁,互斥锁,同步锁</p><p>lock 需要手动获取锁和释放锁</p><p>lock 是一个接口,synchronized是关键字</p><p>synchronized发生异常会自动释放锁,不会导致死锁现象,而lock发生异常如果没有unlock()释放锁,就有可能产生死锁,一般使用lock锁的时候,需要在finally中进行释放锁</p><p>lock锁可以使等待的线程响应中断,而synchronized不会,会一直等待下去</p><h2 id="_19-reentrantlock-和synchronized的区别" tabindex="-1"><a class="header-anchor" href="#_19-reentrantlock-和synchronized的区别"><span>19.ReentrantLock 和synchronized的区别</span></a></h2><p>Reentrantlock是java中的类,继承了lock类,是可重入锁,悲观锁,独占锁,互斥锁,同步锁</p><p>相同点: 主要解决共享变量如何访问的问题</p><p>都是可重入锁,同一线程可以多次获取锁</p><p>保证了线程安全的两大特性 可见性 原子性</p><p>不同点:</p><ol><li>ReentrantLock 就像手动汽车，需要显示的调用lock和unlock方法,synchronized 隐式获得释放锁。</li><li>ReentrantLock 可响应中断， synchronized 是不可以响应中断的ReentrantLock 为处理锁的不可用性提供了更高的灵活性</li><li>ReentrantLock 是 API 级别的， synchronized 是 JVM 级别的</li><li>ReentrantLock 可以实现公平锁、非公平锁，默认非公平锁，synchronized 是非公平锁，且不可更改。</li><li>ReentrantLock 通过 Condition 可以绑定多个条件</li></ol>',112)]))}]]),t=JSON.parse('{"path":"/note_java/3kml5lk3/","title":"锁相关知识","lang":"zh-CN","frontmatter":{"title":"锁相关知识","createTime":"2024/11/17 01:20:26","permalink":"/note_java/3kml5lk3/","description":"https://cloud.tencent.com/developer/article/1953236 Java中锁分为以下几种： 乐观锁、悲观锁 自旋锁、适应性自旋锁 锁升级(无锁 -> 偏向锁 -> 轻量级锁 -> 重量级锁) 公平锁、非公平锁 可重入锁 独享锁、共享锁 互斥锁、读写锁 乐观锁 & 悲观锁 两种锁只是一种概念。 悲观锁适合写操作多的...","head":[["meta",{"property":"og:url","content":"https://www.unravely.press/note_java/3kml5lk3/"}],["meta",{"property":"og:site_name","content":"Unravely"}],["meta",{"property":"og:title","content":"锁相关知识"}],["meta",{"property":"og:description","content":"https://cloud.tencent.com/developer/article/1953236 Java中锁分为以下几种： 乐观锁、悲观锁 自旋锁、适应性自旋锁 锁升级(无锁 -> 偏向锁 -> 轻量级锁 -> 重量级锁) 公平锁、非公平锁 可重入锁 独享锁、共享锁 互斥锁、读写锁 乐观锁 & 悲观锁 两种锁只是一种概念。 悲观锁适合写操作多的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img-blog.csdnimg.cn/16d6679a2a0b4a2285f0954bdccc2925.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATXIu57Gz5pav54m55YS_6LW1,size_15,color_FFFFFF,t_70,g_se,x_16"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-18T10:30:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-18T10:30:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"锁相关知识\\",\\"image\\":[\\"https://img-blog.csdnimg.cn/16d6679a2a0b4a2285f0954bdccc2925.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATXIu57Gz5pav54m55YS_6LW1,size_15,color_FFFFFF,t_70,g_se,x_16\\",\\"https://csdnimg.cn/release/blogv2/dist/components/img/star.png\\",\\"https://csdnimg.cn/release/blogv2/dist/components/img/arrowDownWhite.png\\"],\\"dateModified\\":\\"2024-11-18T10:30:55.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"乐观锁：","slug":"乐观锁","link":"#乐观锁","children":[]},{"level":2,"title":"悲观锁：","slug":"悲观锁","link":"#悲观锁","children":[]},{"level":2,"title":"1.乐观锁","slug":"_1-乐观锁","link":"#_1-乐观锁","children":[]},{"level":2,"title":"2.悲观锁","slug":"_2-悲观锁","link":"#_2-悲观锁","children":[]},{"level":2,"title":"3.自旋锁","slug":"_3-自旋锁","link":"#_3-自旋锁","children":[]},{"level":2,"title":"4.可重入锁(递归锁)","slug":"_4-可重入锁-递归锁","link":"#_4-可重入锁-递归锁","children":[]},{"level":2,"title":"5.读写锁","slug":"_5-读写锁","link":"#_5-读写锁","children":[]},{"level":2,"title":"6.公平锁","slug":"_6-公平锁","link":"#_6-公平锁","children":[]},{"level":2,"title":"7.非公平锁","slug":"_7-非公平锁","link":"#_7-非公平锁","children":[]},{"level":2,"title":"8.共享锁","slug":"_8-共享锁","link":"#_8-共享锁","children":[]},{"level":2,"title":"9.独占锁","slug":"_9-独占锁","link":"#_9-独占锁","children":[]},{"level":2,"title":"10.重量级锁","slug":"_10-重量级锁","link":"#_10-重量级锁","children":[]},{"level":2,"title":"11.轻量级锁","slug":"_11-轻量级锁","link":"#_11-轻量级锁","children":[]},{"level":2,"title":"12.偏向锁","slug":"_12-偏向锁","link":"#_12-偏向锁","children":[]},{"level":2,"title":"13.分段锁","slug":"_13-分段锁","link":"#_13-分段锁","children":[]},{"level":2,"title":"14.互斥锁","slug":"_14-互斥锁","link":"#_14-互斥锁","children":[]},{"level":2,"title":"15.同步锁","slug":"_15-同步锁","link":"#_15-同步锁","children":[]},{"level":2,"title":"16.死锁","slug":"_16-死锁","link":"#_16-死锁","children":[]},{"level":2,"title":"17.synchronized(简单总结)","slug":"_17-synchronized-简单总结","link":"#_17-synchronized-简单总结","children":[]},{"level":2,"title":"18.Lock和synchronized的区别","slug":"_18-lock和synchronized的区别","link":"#_18-lock和synchronized的区别","children":[]},{"level":2,"title":"19.ReentrantLock 和synchronized的区别","slug":"_19-reentrantlock-和synchronized的区别","link":"#_19-reentrantlock-和synchronized的区别","children":[]}],"readingTime":{"minutes":11.11,"words":3333},"git":{"createdTime":1731778103000,"updatedTime":1731925855000,"contributors":[{"name":"banxia","email":"yutong9717@163.com","commits":1},{"name":"unravely","email":"yutong9717@163.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/note_java/20.thread/锁相关知识.md","bulletin":false}')}}]);